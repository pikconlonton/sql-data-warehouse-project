import pyodbc
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as mdates


#Ph·∫£i Thay ƒë·ªïi K·∫øt n·ªëi database ph√π h·ª£p

def make_revenue_by_month_csv():
    # Th√¥ng tin k·∫øt n·ªëi
    server = 'localhost'  # ho·∫∑c 'T√™n_M√°y\\T√™n_Instance'
    database = 'hms_hqt3'
    username = 'tenuser'  # N·∫øu d√πng SQL Authentication
    password = 'matkhau'  # N·∫øu d√πng SQL Authentication

    # K·∫øt n·ªëi (n·∫øu d√πng Windows Authentication, b·ªè UID v√† PWD)
    conn = pyodbc.connect(
        'DRIVER={ODBC Driver 17 for SQL Server};'
        'SERVER=localhost;'
        'DATABASE=hms_hqt3;'
        'Trusted_Connection=yes;'
    )

    cursor = conn.cursor()
    import csv

    cursor.execute("SELECT * FROM revenue_by_month")
    rows = cursor.fetchall()
    columns = [column[0] for column in cursor.description]

    with open("revenue_by_month.csv", "w", newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(columns)
        writer.writerows(rows)


def make_revenue_prediction_in_5_months_csv():
    df = pd.read_csv('revenue_by_month.csv')  # ‚Üê Thay b·∫±ng t√™n file CSV th·∫≠t

    # T·∫°o c·ªôt datetime
    df['date'] = pd.to_datetime(df['year'].astype(str) + '-' + df['month'].astype(str) + '-01')
    df = df.sort_values('date')

    # T·∫°o ch·ªâ s·ªë th√°ng
    df['month_index'] = np.arange(len(df))

    # Hu·∫•n luy·ªán model
    X = df[['month_index']]
    y = df['total_revenue']
    model = LinearRegression()
    model.fit(X, y)

    # D·ª± ƒëo√°n 3 th√°ng ti·∫øp theo
    future_months = np.arange(len(df), len(df) + 5).reshape(-1, 1)
    future_preds = model.predict(future_months)
    future_dates = pd.date_range(start=df['date'].max() + pd.DateOffset(months=1), periods=5, freq='MS')

    df_future = pd.DataFrame({
        'date': future_dates,
        'total_revenue': future_preds,
        'type': 'D·ª± ƒëo√°n'
    })

    # G·ªôp l·∫°i d·ªØ li·ªáu
    df['type'] = 'Th·ª±c t·∫ø'
    df_all = pd.concat([df[['date', 'total_revenue', 'type']], df_future], ignore_index=True)

    df_all.to_csv('revenue_prediction_in_5_months.csv', index=False)

    # V·∫Ω bi·ªÉu ƒë·ªì
    plt.figure(figsize=(12, 6))
    sns.set_style("whitegrid")
    sns.lineplot(data=df_all, x='date', y='total_revenue', hue='type', marker='o', palette='Set2')

    # ƒê·ªãnh d·∫°ng tr·ª•c X
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('Thg %m %Y'))
    plt.gca().xaxis.set_major_locator(mdates.MonthLocator())

    # ‚ûï Th√™m ƒë∆∞·ªùng ph√¢n c√°ch gi·ªØa d·ªØ li·ªáu th·∫≠t v√† d·ª± ƒëo√°n
    first_pred_date = df_future['date'].min()
    plt.axvline(first_pred_date, color='gray', linestyle='--', linewidth=1.5)
    plt.text(first_pred_date, df_all['total_revenue'].max() * 1.01, '‚Üí D·ª± ƒëo√°n', color='gray', ha='left', fontsize=10)

    # Trang tr√≠ th√™m
    plt.title('üìà D·ª± ƒëo√°n t·ªïng doanh thu 3 th√°ng ti·∫øp theo', fontsize=14)
    plt.xlabel('Th·ªùi gian')
    plt.ylabel('T·ªïng doanh thu')
    plt.xticks(rotation=45)
    plt.tight_layout()

    # ‚úÖ L∆∞u ·∫£nh thay v√¨ hi·ªÉn th·ªã
    plt.savefig('revenue_prediction_in_5_months.jpg', dpi=300)
    plt.close()
    print("‚úÖ Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh revenue_prediction_in_5_months.jpg")

def make_tbl_revenue_prediction_in_5_months():
    import pyodbc

    # K·∫øt n·ªëi ƒë·∫øn SQL Server
    conn = pyodbc.connect(
        'DRIVER={ODBC Driver 17 for SQL Server};'
        'SERVER=localhost;'
        'DATABASE=hms_hqt3;'
        'Trusted_Connection=yes;'
    )
    cursor = conn.cursor()

    # C√¢u l·ªánh SQL t·∫°o b·∫£ng
    create_table_query = '''
    IF OBJECT_ID('revenue_prediction_in_5_months', 'U') IS NOT NULL
        DROP TABLE revenue_prediction_in_5_months;

    CREATE TABLE revenue_prediction_in_5_months (
        [date] VARCHAR(20),              -- V√≠ d·ª•: '2025-08'
        total_revenue FLOAT,
        [type] NVARCHAR(20)
    );
    '''

    # Th·ª±c thi t·∫°o b·∫£ng
    cursor.execute(create_table_query)
    conn.commit()

    print("‚úÖ ƒê√£ t·∫°o b·∫£ng revenue_prediction_in_5_months th√†nh c√¥ng.")

    cursor.close()
    conn.close()



def load_tbl_revenue_prediction_in_5_months():
    import pyodbc
    import pandas as pd

    # K·∫øt n·ªëi SQL Server
    conn = pyodbc.connect(
        'DRIVER={ODBC Driver 17 for SQL Server};'
        'SERVER=localhost;'
        'DATABASE=hms_hqt3;'
        'Trusted_Connection=yes;'
    )
    cursor = conn.cursor()

    # Gi·∫£ s·ª≠ df_5months ƒë√£ ƒë∆∞·ª£c t·∫°o nh∆∞ ·ªü b∆∞·ªõc tr∆∞·ªõc
    # N·∫øu ch∆∞a c√≥ th√¨ load l·∫°i t·ª´ CSV:
    df_5months = pd.read_csv('revenue_prediction_in_5_months.csv')

    # Ch√®n d·ªØ li·ªáu t·ª´ng d√≤ng
    for index, row in df_5months.iterrows():
        cursor.execute("""
            INSERT INTO revenue_prediction_in_5_months ([date], total_revenue, [type])
            VALUES (?, ?, ?)
        """, row['date'], row['total_revenue'], row['type'])

    conn.commit()
    cursor.close()
    conn.close()
    print("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ch√®n v√†o b·∫£ng revenue_prediction_in_5_months")


if __name__ == '__main__':
    make_revenue_by_month_csv()
    make_revenue_prediction_in_5_months_csv()
    make_tbl_revenue_prediction_in_5_months()
    load_tbl_revenue_prediction_in_5_months()
